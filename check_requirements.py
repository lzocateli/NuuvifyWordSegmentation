#!/usr/bin/env python3
"""
Script para verificar pr√©-requisitos do projeto Nuuvify Word Segmentation
"""

import shutil
import subprocess
import sys
from pathlib import Path


def check_python_version():
    """Verifica a vers√£o do Python"""
    version = sys.version_info
    print(f"üêç Python: {version.major}.{version.minor}.{version.micro}")

    if version.major < 3 or (version.major == 3 and version.minor < 11):
        print("‚ùå Python 3.11+ √© obrigat√≥rio")
        return False
    else:
        print("‚úÖ Vers√£o do Python adequada")
        return True


def check_pip():
    """Verifica se pip est√° dispon√≠vel"""
    try:
        import pip

        result = subprocess.run(
            [sys.executable, "-m", "pip", "--version"], capture_output=True, text=True
        )
        print(f"üì¶ pip: {result.stdout.strip()}")
        print("‚úÖ pip dispon√≠vel")
        return True
    except ImportError:
        print("‚ùå pip n√£o est√° dispon√≠vel")
        return False


def check_docker():
    """Verifica se Docker est√° dispon√≠vel"""
    if shutil.which("docker"):
        try:
            result = subprocess.run(
                ["docker", "--version"], capture_output=True, text=True
            )
            print(f"üê≥ Docker: {result.stdout.strip()}")

            # Verificar se Docker est√° rodando
            result = subprocess.run(["docker", "info"], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Docker dispon√≠vel e rodando")
                return True
            else:
                print("‚ö†Ô∏è  Docker instalado mas n√£o est√° rodando")
                return False
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è  Docker instalado mas com problemas")
            return False
    else:
        print("‚ö†Ô∏è  Docker n√£o encontrado (opcional)")
        return False


def check_git():
    """Verifica se Git est√° dispon√≠vel"""
    if shutil.which("git"):
        try:
            result = subprocess.run(
                ["git", "--version"], capture_output=True, text=True
            )
            print(f"üìÇ Git: {result.stdout.strip()}")
            print("‚úÖ Git dispon√≠vel")
            return True
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è  Git instalado mas com problemas")
            return False
    else:
        print("‚ö†Ô∏è  Git n√£o encontrado (recomendado)")
        return False


def check_uv():
    """Verifica se uv est√° dispon√≠vel"""
    if shutil.which("uv"):
        try:
            result = subprocess.run(["uv", "--version"], capture_output=True, text=True)
            print(f"‚ö° uv: {result.stdout.strip()}")
            print("‚úÖ uv dispon√≠vel (instala√ß√£o mais r√°pida)")
            return True
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è  uv instalado mas com problemas")
            return False
    else:
        print("‚ÑπÔ∏è  uv n√£o encontrado (opcional - acelera instala√ß√£o)")
        print("   Para instalar: curl -LsSf https://astral.sh/uv/install.sh | sh")
        return False


def check_project_structure():
    """Verifica a estrutura do projeto"""
    required_files = [
        "pyproject.toml",
        "src/api/main.py",
        "src/services/nuuvify_wordsegment_service.py",
    ]

    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)

    if missing_files:
        print("‚ùå Arquivos do projeto faltando:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    else:
        print("‚úÖ Estrutura do projeto correta")
        return True


def main():
    """Fun√ß√£o principal"""
    print("üîç VERIFICA√á√ÉO DE PR√â-REQUISITOS - NUUVIFY WORD SEGMENTATION")
    print("=" * 60)

    # Verificar Docker primeiro (m√©todo recomendado)
    print("\nüìã Verificando Docker (RECOMENDADO)...")
    docker_available = check_docker()

    if docker_available:
        print("\nüéâ Docker dispon√≠vel! M√©todo recomendado pronto para uso.")
        print("\nüöÄ EXECUTE AGORA:")
        print("./docker-deploy.sh latest run-dev")
        print("# API dispon√≠vel em: http://localhost:8000")
        print("\nüìñ Documenta√ß√£o: http://localhost:8000/docs")
        return True

    print("\nüìã Docker n√£o dispon√≠vel. Verificando instala√ß√£o local...")

    checks = [
        ("Python 3.11+", check_python_version, True),
        ("pip", check_pip, True),
        ("Estrutura do projeto", check_project_structure, True),
        ("Git", check_git, False),
        ("uv (opcional)", check_uv, False),
    ]

    results = []

    for name, check_func, required in checks:
        print(f"\nüìã Verificando {name}...")
        result = check_func()
        results.append((name, result, required))

    print("\n" + "=" * 60)
    print("üìä RESUMO (Instala√ß√£o Local):")

    required_passed = 0
    required_total = 0
    optional_passed = 0
    optional_total = 0

    for name, passed, required in results:
        status = "‚úÖ" if passed else "‚ùå"
        category = "OBRIGAT√ìRIO" if required else "OPCIONAL"
        print(f"{status} {name} ({category})")

        if required:
            required_total += 1
            if passed:
                required_passed += 1
        else:
            optional_total += 1
            if passed:
                optional_passed += 1

    print(f"\nüìà Obrigat√≥rios: {required_passed}/{required_total}")
    print(f"\nüìà Opcionais: {optional_passed}/{optional_total}")

    if required_passed == required_total:
        print("\nüéâ Pr√©-requisitos para instala√ß√£o local atendidos!")
        print("\nüöÄ Pr√≥ximos passos (Instala√ß√£o Local):")
        print("1. pip install -e .")
        print("2. python -c \"import spacy; spacy.cli.download('pt_core_news_lg')\"")
        print("3. uvicorn src.api.main:app --reload")
        print("\nüí° DICA: Para uma experi√™ncia melhor, instale Docker e use:")
        print("./docker-deploy.sh latest run-dev")
        return True
    else:
        print("\n‚ö†Ô∏è  Alguns pr√©-requisitos obrigat√≥rios n√£o foram atendidos.")
        print(
            "Resolva os problemas acima ou instale Docker para usar o m√©todo recomendado."
        )
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
